public class Solution {
    public static int lastDigit(int[] array) {
      
          int length = array.length;
          int n1;
          int n2;

          if(array==null || length==0) return 1;

          if(length==1) return array[0]%10;


          if (array.length==2) return lastDigit(array[0],array[1],10);   
               

          while (length>=3) {  
            
              n1=array[length-2];
              n2=array[length-1];

              int[] newArray = new int[length-1];

              array [length-2] = lastDigit(n1,n2,20); 

              length--;

              if (length == 2) return lastDigit(array[0],array[1],10);
           
          }

         return 11;
     }
  
//********************** *MAIN ************************************

      public static int lastDigit(int n1, int n2, int base) { 
        
         if (n2==0) {return 1;}
        
         if (n1==0) {return 0;}
        
         if (n2==1) {return n1%10;}
        
         if (n1==1) {return 1;}
        
         int [][]    lastDigits  = {{20, 20, 20, 20},
                                    { 1,  1,  1,  1},
                                    {16, 12,  4,  8},
                                    { 1,  3,  9,  7},
                                    {16,  4, 16,  4},
                                    { 5,  5,  5,  5},
                                    {16, 16, 16,  16},
                                    { 1,  7,  9,  3},
                                    {16,  8,  4,  12},
                                    { 1,  9,  1,  9},
                                    {20, 20, 20,  20},
                                    { 1, 11,  1,  11},
                                    {16, 12,  4,  8},
                                    { 1, 13,  9,  17},
                                    {16,  4, 16,  4},
                                    { 5, 15,  5, 15},
                                    {16, 16, 16, 16},
                                    { 1, 17,  9, 13},
                                    {16,  8,  4, 12},
                                    { 1, 19,  1, 19}};

         if (base == 10){
            return lastDigits[n1%10][n2%4]%10; 
         } 
         else{

             int pre = lastDigits[n1%20][n2%4];

             return (pre<=1)? pre+20 : pre; 
         } 
    }
}
