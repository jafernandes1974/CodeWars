mport java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.Set;
import java.util.TreeSet;

public class SudokuSolver {
  
    public static List<List<TreeSet<Integer>>>  puzzle = new ArrayList<>();
  
//---------------------------main---------------------------
    public static int[][] sudoku(int[][] puz) {
        
          preparation(puz);
           
          int lastNrUnknowns = 81;
          int difference     = 81;
      
          while (difference>0){
              blocking();

              int nrUnknowns = balance();
      
              difference = lastNrUnknowns-nrUnknowns;
              lastNrUnknowns=nrUnknowns;
          } 
    
         return toArray();
    }
  //---------------------------preparation----------------------------
    public static void preparation (int[][] p){
      
        for (int t=0; t<9; t++){
              puzzle.add(new ArrayList<TreeSet<Integer>>());

              for (int u=0; u<9; u++){
                    int num = p[t][u];
                    TreeSet<Integer> set1 = new TreeSet<>(Arrays.asList(-1,-2,-3,-4,-5,-6,-7,-8,-9));
                    TreeSet<Integer> set2 = new TreeSet<>(Arrays.asList(num));

                    if(num>0) {
                        puzzle.get(t).add(u,set2);
                    }
                    else {
                        puzzle.get(t).add(u,set1);
                    }
              }  
          } 
     } 
      
 //---------------------------blocking----------------------------
    public static void  blocking (){     
        for (int x=0; x<9; x++){
              for (int y=0; y<9; y++){
                  int num = (new TreeSet<Integer> (puzzle.get(x).get(y))).first();
                 
                  if(num>0){
                      for (int i = 0; i<9;i++){
                            puzzle.get(x).get(i).remove(Integer.valueOf(-num));  //lines
                            puzzle.get(i).get(y).remove(Integer.valueOf(-num));  //columns
                      }
                  }
              }
         }
     
          for(int x=0; x<9; x++){                           //squares
              for(int y=0; y<9; y++){ 
                  int num = puzzle.get(x).get(y).first();
                if(num>0){
                    int xa = 3*(x/3);
                    int ya = 3*(y/3);
                  
                    for(int i=0; i<3; i++){          
                        for(int j=0; j<3; j++){ 
                            puzzle.get(xa+i).get(ya+j).remove(Integer.valueOf(-num));   
                        }
                    }  
                 }             
              }
          }
    }
  
  //---------------------------balance----------------------------
    public static int  balance (){ 
      
        int     nrUnknowns = 0;
     
        for (int i=0; i<9; i++){
              for (int j=0; j<9; j++){
                  TreeSet<Integer> set= puzzle.get(i).get(j);
                  if (set.size() == 1){
                        int e = set.first();
                        int a = Math.abs(e);
                        set.remove(e);
                        set.add(a);
                  }      
                  else{               
                      nrUnknowns++;
                  }  
              }
        }
        return nrUnknowns;
    }  
 //---------------------------toArray----------------------------
    public static int [][] toArray (){     
  
         int [][] result = new int [9][9];

         for (int k=0; k<9;k++){
              for (int l=0; l<9;l++){
                   result[k][l]=Math.abs(puzzle.get(k).get(l).first());            
              }             
         }
         return result; 
     }
}
